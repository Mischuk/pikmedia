//============== MIXINS ==============//
clearfix()
  &:before
  &:after
    content ''
    display table
    clear both

anim()
  transition all 0.2s cubic-bezier(.33,.66,.66,1)

smooth()
  -webkit-transform translate3d(0, 0, 0)
  -webkit-backface-visibility hidden
  -webkit-perspective 1000

link()
  a
    anim()
    color rgba(255,255,255,.5)
    text-decoration underline
    span
      anim()
      color #fff
    &:hover
      text-decoration none
link-blue()
  a
    anim()
    color rgba(12,133,170,0.5)
    text-decoration underline
    span
      anim()
      color $blue
    &:hover
      text-decoration none
      span
        color #000
pseudo-dark-bg(n)
  content ''
  position absolute
  left 0
  top 0
  width 100%
  height 100%
  background rgba(0,0,0,n)

bg(image)
  background url(image) no-repeat 50%
  background-size cover

dib(fn)
  display inline-block
  vertical-align fn


heading-line()
  position relative
  padding-bottom 30px
  margin-bottom 30px
  &:after
    content ''
    width 170px
    height 3px
    background #fff
    position absolute
    left 50%
    margin-left -(@width/2)
    bottom 0

mouse()
  position absolute
  left 50%
  bottom -80px
  width 20px
  height 30px
  background url("../images/mouse.png") no-repeat 0 0
  cursor pointer
  animation mouse 1s infinite linear
  html.touchevents &
    display none
  @media screen and (max-height: 750px)
    display none
  @media screen and (max-width: 1024px)
    display none

size(n)
  width n
  height n
//
// TRIANGLE
// ========
// https://github.com/jackbrewer/stylus-mixins/blob/master/docs/triangle.md
triangle($point = 'up', $size = 1em, $color = #777)

  if $size is a 'unit' && $color is a 'color'

    if $point == 'up'
      _triangle-borders({top: '', right: transparent, bottom: solid, left: transparent}, $size, $color)
    else if $point == 'right'
      _triangle-borders({top: transparent, right: '', bottom: transparent, left: solid}, $size, $color)
    else if $point == 'down'
      _triangle-borders({top: solid, right: transparent, bottom: '', left: transparent}, $size, $color)
    else if $point == 'left'
      _triangle-borders({top: transparent, right: solid, bottom: transparent, left: ''}, $size, $color)
    else if $point == 'up-left'
      $size = ($size / 2)
      _triangle-borders({top: solid, right: transparent, bottom: transparent, left: solid}, $size, $color)
    else if $point == 'up-right'
      $size = ($size / 2)
      _triangle-borders({top: solid, right: solid, bottom: transparent, left: transparent}, $size, $color)
    else if $point == 'down-right'
      $size = ($size / 2)
      _triangle-borders({top: transparent, right: solid, bottom: solid, left: transparent}, $size, $color)
    else if $point == 'down-left'
      $size = ($size / 2)
      _triangle-borders({top: transparent, right: transparent, bottom: solid, left: solid}, $size, $color)


//
// TRIANGLE BORDERS
// This mixin should not be called directly
//

_triangle-borders($sides, $size, $color)

  width 0
  height 0

  for $side, $style in $sides
    if $style == solid
      border-{$side} $size solid $color
    else if $style == transparent
      border-{$side} $size solid transparent


// Set user select none
user-select-none()
  -webkit-touch-callout none
  -khtml-user-select none
  user-select none